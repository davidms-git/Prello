{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.4", "generated_at": "2025-07-17T20:02:16.941892Z", "invocation_id": "4c2d3b45-12e4-4e12-9640-12d429ea987f", "invocation_started_at": "2025-07-17T20:02:13.613415Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.723812Z", "completed_at": "2025-07-17T20:02:16.735905Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.736512Z", "completed_at": "2025-07-17T20:02:16.736532Z"}], "thread_id": "Thread-1", "execution_time": 0.015823841094970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__POI_tourist_establishments", "compiled": true, "compiled_code": "WITH source AS (\n\n    SELECT *\n    FROM `prello-france`.`prello_france`.`POI_tourist_establishments`\n\n),\n\nrenamed AS (\n\n    SELECT\n        poi,\n        name,\n        latitude,\n        longitude,\n        municipality_code,\n        importance,\n        name_reprocessed\n    FROM source\n\n),\n\ncleaned AS (\n\n    SELECT DISTINCT\n        poi,\n        name,\n        latitude,\n        longitude,\n        municipality_code,\n        importance,\n        name_reprocessed\n    FROM renamed\n    WHERE\n        municipality_code IS NOT NULL\n        AND importance IS NOT NULL\n        AND importance > 0\n\n)\n\nSELECT *\nFROM cleaned", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__POI_tourist_establishments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.741214Z", "completed_at": "2025-07-17T20:02:16.744738Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.745338Z", "completed_at": "2025-07-17T20:02:16.745349Z"}], "thread_id": "Thread-1", "execution_time": 0.0070993900299072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__POI_touristic_sites_by_municipality", "compiled": true, "compiled_code": "WITH source AS (\n\n    SELECT *\n    FROM `prello-france`.`prello_france`.`POI_touristic_sites_by_municipality`\n\n),\n\ncleaned AS (\n\n    SELECT DISTINCT\n        poi,\n        name,\n        latitude,\n        longitude,\n        municipality_code,\n        importance,\n        name_reprocessed\n    FROM source\n    WHERE\n        municipality_code IS NOT NULL\n        AND importance IS NOT NULL\n        AND importance > 0\n\n)\n\nSELECT *\nFROM cleaned", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__POI_touristic_sites_by_municipality`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.749676Z", "completed_at": "2025-07-17T20:02:16.753099Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.753710Z", "completed_at": "2025-07-17T20:02:16.753721Z"}], "thread_id": "Thread-1", "execution_time": 0.006989479064941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__average_salary_by_municipality", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `prello-france`.`prello_france`.`average_salary_by_municipality`\n\n),\n\ncleaned as (\n\n    select\n        municipality_code,\n        avg_net_salary,\n        year\n\n    from source\n    where municipality_code is not null \n\n)\n\nselect * from cleaned", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__average_salary_by_municipality`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.758169Z", "completed_at": "2025-07-17T20:02:16.762420Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.763032Z", "completed_at": "2025-07-17T20:02:16.763043Z"}], "thread_id": "Thread-1", "execution_time": 0.007947444915771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__geographical_referential", "compiled": true, "compiled_code": "\n\nWITH src AS (\n\n    -- pull the raw table via the source() macro\n    SELECT\n        municipality_code,\n        city_name,\n        city_name_normalized,\n        municipality_type,\n        latitude,\n        longitude,\n        department_code,\n        department_name,\n        epci_code                -- keep it for the COALESCE\n    FROM `prello-france`.`prello_france`.`geographical_referential`\n\n)\n\nSELECT\n    municipality_code,\n    city_name,\n    city_name_normalized,\n    municipality_type,\n    latitude,\n    longitude,\n    department_code,\n    epci_code,\n    department_name,\nFROM src", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__geographical_referential`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.767460Z", "completed_at": "2025-07-17T20:02:16.770708Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.771295Z", "completed_at": "2025-07-17T20:02:16.771306Z"}], "thread_id": "Thread-1", "execution_time": 0.006792545318603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__housing_stock_clean", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `prello-france`.`prello_france`.`housing_stock`\n\n),\n\nrenamed as (\n\n    select\n        int64_field_0,\n        CAST(year AS STRING) || '_' || CAST(municipality_code AS STRING) AS year_municipality_key,\n        municipality_code,\n        year,\n        nb_principal_home,\n        nb_second_home,\n        nb_vacants_housing,\n        nb_tot_housing,\n        secondary_home_rate,\n        principal_home_rate,\n        vacants_housing_rate\n\n    from source\n    where year > 2000\n\n)\n\nselect * from renamed", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__housing_stock_clean`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.775920Z", "completed_at": "2025-07-17T20:02:16.779391Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.780046Z", "completed_at": "2025-07-17T20:02:16.780057Z"}], "thread_id": "Thread-1", "execution_time": 0.007155656814575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__notary_real_estate_sales_clean", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `prello-france`.`prello_france`.`notary_real_estate_sales`\n\n),\n\nrenamed as (\n\n    select\n        sales_date,\n        EXTRACT(YEAR FROM CAST(sales_date AS DATE)) AS year,\n        CAST(EXTRACT(YEAR FROM CAST(sales_date AS DATE)) AS STRING) || '_' || CAST(municipality_code AS STRING) AS year_municipality_key,\n        sales_amount,\n        street_number,\n        street_code,\n        street_name,\n        nom_commune,\n        municipality_code,\n        premise_type,\n        surface,\n        number_of_principal_rooms,\n        sales_price_m2,\n        latitude,\n        longitude\n\n    from source\n    where EXTRACT(YEAR FROM CAST(sales_date AS DATE)) > 2000\n)\n\nselect * from renamed", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__notary_real_estate_sales_clean`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.784455Z", "completed_at": "2025-07-17T20:02:16.787893Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.788466Z", "completed_at": "2025-07-17T20:02:16.788476Z"}], "thread_id": "Thread-1", "execution_time": 0.006888389587402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__population_by_municipality", "compiled": true, "compiled_code": "with source as (\n    select * \n    from `prello-france`.`prello_france`.`population_by_municipality`\n),\ncleaned as (\n    select\n        cast(municipality_code as string) as municipality_code,\n        cast(year as int) as year,\n        cast(population as float64) as population,\n        -- Add more fields as needed\n    from source\n    where municipality_code is not null\n      and year is not null\n      and year >= 2000\n),\n\nfinal as (\n    select\n        *,\n        concat(municipality_code, '_', cast(year as string)) as id\n    from cleaned\n)\n\nselect * from final", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__population_by_municipality`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.792860Z", "completed_at": "2025-07-17T20:02:16.796439Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.797061Z", "completed_at": "2025-07-17T20:02:16.797072Z"}], "thread_id": "Thread-1", "execution_time": 0.0071048736572265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__poverty_population_by_municipality", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `prello-france`.`prello_france`.`poverty_population_by_municipality`\n\n),\n\nrenamed as (\n\n    select\n        municipality_code,\n        year,\n        population,\n        country_code\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__poverty_population_by_municipality`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.801508Z", "completed_at": "2025-07-17T20:02:16.805023Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.805607Z", "completed_at": "2025-07-17T20:02:16.805617Z"}], "thread_id": "Thread-1", "execution_time": 0.0070362091064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.stg_prello_france__real_estate_info_by_municipality", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `prello-france`.`prello_france`.`real_estate_info_by_municipality`\n\n),\n\nrenamed as (\n\n    select\n        cast(municipality_code as string) as municipality_code,\n        cast(intensite_tension_immo as float64) as intensite_tension_immo,\n        cast(rental_max_apartment as float64) as rental_max_apartment,\n        cast(rental_min_apartment as float64) as rental_min_apartment,\n        cast(rental_med_house as float64) as rental_med_house,\n        cast(rental_max_house as float64) as rental_max_house,\n        cast(rental_min_house as float64) as rental_min_house,\n        cast(rental_med_all as float64) as rental_med_all,\n        cast(rental_max_all as float64) as rental_max_all,\n        cast(rental_min_all as float64) as rental_min_all\n\n    from source\n\n),\n\nfiltered as (\n\n    -- Remove rows with nulls in key fields\n    select *\n    from renamed\n    where municipality_code is not null\n      and intensite_tension_immo is not null\n      and rental_med_all is not null\n\n)\n\nselect* from filtered", "relation_name": "`prello-france`.`dbt_ddelmor`.`stg_prello_france__real_estate_info_by_municipality`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.810097Z", "completed_at": "2025-07-17T20:02:16.814394Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.814991Z", "completed_at": "2025-07-17T20:02:16.815001Z"}], "thread_id": "Thread-1", "execution_time": 0.007886886596679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_count_tourist_poi", "compiled": true, "compiled_code": "WITH base_counts AS (\n    SELECT\n        municipality_code,\n        COUNT(*) AS count_tourist_poi\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__POI_tourist_establishments`\n    WHERE municipality_code IS NOT NULL\n    GROUP BY municipality_code\n),\n\nstats AS (\n    SELECT\n        MIN(count_tourist_poi) AS min_count,\n        MAX(count_tourist_poi) AS max_count\n    FROM base_counts\n)\n\nSELECT\n    b.municipality_code,\n    b.count_tourist_poi,\n    ROUND(\n        CASE \n            WHEN s.max_count != s.min_count THEN \n                (b.count_tourist_poi - s.min_count) / (s.max_count - s.min_count)\n            ELSE 0\n        END,\n        2\n    ) AS count_tourist_poi_normalized\nFROM base_counts b\nCROSS JOIN stats s", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_count_tourist_poi`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.819239Z", "completed_at": "2025-07-17T20:02:16.822444Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.823037Z", "completed_at": "2025-07-17T20:02:16.823048Z"}], "thread_id": "Thread-1", "execution_time": 0.006743431091308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_tourist_poi_score", "compiled": true, "compiled_code": "WITH base AS (\n    SELECT\n        municipality_code,\n        SUM(importance) AS raw_establishment_score\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__POI_tourist_establishments`\n    WHERE importance IS NOT NULL\n      AND municipality_code IS NOT NULL\n    GROUP BY municipality_code\n),\n\nmax_score AS (\n    SELECT MAX(raw_establishment_score) AS max_score\n    FROM base\n),\n\nnormalized AS (\n    SELECT\n        b.municipality_code,\n        b.raw_establishment_score,\n        ROUND(SAFE_DIVIDE(b.raw_establishment_score, m.max_score), 4) AS establishment_score_normalized\n    FROM base b\n    CROSS JOIN max_score m\n)\n\nSELECT *\nFROM normalized", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_tourist_poi_score`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.827381Z", "completed_at": "2025-07-17T20:02:16.830531Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.831129Z", "completed_at": "2025-07-17T20:02:16.831140Z"}], "thread_id": "Thread-1", "execution_time": 0.006617069244384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_avg_net_salary", "compiled": true, "compiled_code": "with salaries as (\n\n    select *\n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__average_salary_by_municipality`\n    where municipality_code is not null\n      and year is not null\n\n),\n\nlatest_salary as (\n\n    select *\n    from salaries\n    qualify row_number() over (\n        partition by municipality_code\n        order by year desc\n    ) = 1\n\n)\n\nselect *\nfrom latest_salary", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_avg_net_salary`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.835525Z", "completed_at": "2025-07-17T20:02:16.838811Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.839383Z", "completed_at": "2025-07-17T20:02:16.839393Z"}], "thread_id": "Thread-1", "execution_time": 0.006865024566650391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_second_home_ratio_2", "compiled": true, "compiled_code": "WITH ranked AS (\n    SELECT\n        municipality_code,\n        year,\n        nb_second_home,\n        nb_tot_housing,\n        ROW_NUMBER() OVER (\n            PARTITION BY municipality_code\n            ORDER BY year DESC\n        ) AS rn\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__housing_stock_clean`\n),\n\n base AS (SELECT\n    municipality_code,\n    year                                     AS latest_year,\n    SUM(nb_second_home) AS nb_second_home,\n    SUM(nb_tot_housing) AS nb_tot_housing,\n    CASE\n        WHEN SUM(nb_tot_housing) = 0 THEN NULL\n        ELSE ROUND(SUM(nb_second_home) * 1.0 / SUM(nb_tot_housing), 2)\n    END AS second_home_ratio\nFROM ranked\nWHERE rn = 1                                 -- keep only the latest-year row\nGROUP BY municipality_code, year)\n\n-- extra CTE to hold the min & max of the ratio\n, stats AS (\n    SELECT\n        MIN(second_home_ratio) AS ratio_min,\n        MAX(second_home_ratio) AS ratio_max\n    FROM base \n)\n\nSELECT\n    b.*,\n    -- min-max normalised ratio (0\u20131)\n    (b.second_home_ratio - s.ratio_min)\n      / NULLIF(s.ratio_max - s.ratio_min, 0)  AS second_home_ratio_normalized\nFROM base AS b\nCROSS JOIN stats AS s", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_second_home_ratio_2`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.843638Z", "completed_at": "2025-07-17T20:02:16.847020Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.847596Z", "completed_at": "2025-07-17T20:02:16.847607Z"}], "thread_id": "Thread-1", "execution_time": 0.0068378448486328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_vacancy_rate", "compiled": true, "compiled_code": "with housing as (\n    select * \n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__housing_stock_clean`\n),\n\ncleaned as (\n    select\n        municipality_code,\n        year,\n        nb_vacants_housing,\n        nb_tot_housing\n    from housing\n    where municipality_code is not null\n      and year is not null\n      and nb_vacants_housing is not null\n      and nb_tot_housing is not null\n      and nb_tot_housing > 0\n      and year >= 2000\n),\n\nranked as (\n    select *,\n           row_number() over (\n               partition by municipality_code\n               order by year desc\n           ) as row_num\n    from cleaned\n),\n\nmost_recent as (\n    select *\n    from ranked\n    where row_num = 1\n),\n\nvacancy_rate_calc as (\n    select\n        municipality_code,\n        year,\n        nb_vacants_housing,\n        nb_tot_housing,\n        -- Normalize to 0\u20131 scale\n        safe_divide(nb_vacants_housing, nb_tot_housing) as vacancy_rate_normalized\n    from most_recent\n)\n\nselect * from vacancy_rate_calc", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_vacancy_rate`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.851892Z", "completed_at": "2025-07-17T20:02:16.855341Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.855938Z", "completed_at": "2025-07-17T20:02:16.855949Z"}], "thread_id": "Thread-1", "execution_time": 0.0069789886474609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_sales_price_2", "compiled": true, "compiled_code": "WITH base AS (\n\n    -- raw input (no changes)\n    SELECT\n        municipality_code,\n        year,\n        sales_price_m2\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__notary_real_estate_sales_clean`\n\n), last_year_flag AS (\n\n    -- find the most recent year per municipality\n    SELECT\n        *,\n        MAX(year) OVER (PARTITION BY municipality_code) AS latest_year_for_muni\n    FROM base\n\n), filtered AS (\n\n    -- keep only rows that belong to that latest year\n    SELECT *\n    FROM last_year_flag\n    WHERE year = latest_year_for_muni\n\n), agg AS (\n\n    -- aggregate within that single most-recent year (in case there are many rows)\n    SELECT\n        municipality_code,\n        year                                    AS latest_year,\n        AVG(sales_price_m2)                    AS avg_sales_price_m2\n        -- add more metrics if useful, e.g. COUNT(*) AS n_transactions\n    FROM filtered\n    GROUP BY municipality_code, year\n\n),\n\nmin_max AS (\n    SELECT\n        MIN(avg_sales_price_m2) AS min_val,\n        MAX(avg_sales_price_m2) AS max_val\n    FROM agg\n)\n\nSELECT\n    a.municipality_code,\n    a.latest_year,\n    a.avg_sales_price_m2,\n    (a.avg_sales_price_m2 - m.min_val) / NULLIF(m.max_val - m.min_val, 0) AS avg_sales_price_m2_normalized\nFROM agg a\nCROSS JOIN min_max m", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_sales_price_2`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.860197Z", "completed_at": "2025-07-17T20:02:16.864276Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.864874Z", "completed_at": "2025-07-17T20:02:16.864885Z"}], "thread_id": "Thread-1", "execution_time": 0.0075321197509765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_poi_density", "compiled": true, "compiled_code": "WITH poi_counts AS (\n    SELECT\n        municipality_code,\n        COUNT(*) AS poi_count\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__POI_touristic_sites_by_municipality`\n    GROUP BY municipality_code\n),\n\nlatest_population AS (\n    SELECT\n        municipality_code,\n        population\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__population_by_municipality`\n    WHERE year = (\n        SELECT MAX(year) FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__population_by_municipality`\n    )\n),\n\njoined_data AS (\n    SELECT\n        pc.municipality_code,\n        poi_count,\n        population,\n        SAFE_DIVIDE(poi_count, population) AS poi_density\n    FROM poi_counts pc\n    JOIN latest_population lp\n        ON pc.municipality_code = lp.municipality_code\n),\n\nstats AS (\n    SELECT\n        MIN(poi_density) AS min_density,\n        MAX(poi_density) AS max_density,\n        MIN(poi_count) AS min_count,\n        MAX(poi_count) AS max_count\n    FROM joined_data\n)\n\nSELECT\n    jd.municipality_code,\n    jd.poi_count,\n    jd.population,\n    ROUND(jd.poi_density, 2) AS poi_density,\n    \n    ROUND(\n        CASE \n            WHEN s.max_density != s.min_density THEN\n                (jd.poi_density - s.min_density) / (s.max_density - s.min_density)\n            ELSE 0\n        END,\n        2\n    ) AS poi_density_normalized,\n\n    ROUND(\n        CASE\n            WHEN s.max_count != s.min_count THEN\n                (jd.poi_count - s.min_count) / (s.max_count - s.min_count)\n            ELSE 0\n        END,\n        2\n    ) AS poi_count_normalized\n\nFROM joined_data jd\nCROSS JOIN stats s", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_poi_density`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.869134Z", "completed_at": "2025-07-17T20:02:16.873579Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.874183Z", "completed_at": "2025-07-17T20:02:16.874194Z"}], "thread_id": "Thread-1", "execution_time": 0.007925033569335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_percentage_population_growth", "compiled": true, "compiled_code": "with population as (\n    select * \n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__poverty_population_by_municipality`\n    where municipality_code is not null\n      and year is not null\n      and population is not null\n),\n\nranked as (\n    select *,\n           row_number() over (\n               partition by municipality_code\n               order by year desc\n           ) as row_num\n    from population\n),\n\n-- Filter for the last 6 years (most recent + previous 5)\nlast_six_years as (\n    select *\n    from ranked\n    where row_num <= 6\n),\n\ngrowth_calc as (\n    select\n        municipality_code,\n        year,\n        population,\n        lag(population) over (\n            partition by municipality_code\n            order by year\n        ) as previous_population\n    from last_six_years\n),\n\nyearly_growth as (\n    select\n        municipality_code,\n        year,\n        safe_divide(population - previous_population, previous_population) as annual_growth\n    from growth_calc\n    where previous_population is not null\n),\n\naggregated as (\n    select\n        municipality_code,\n        avg(annual_growth) as avg_growth_last_5_years\n    from yearly_growth\n    group by municipality_code\n)\n\nselect *\nfrom aggregated", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_percentage_population_growth`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.878541Z", "completed_at": "2025-07-17T20:02:16.881720Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.882304Z", "completed_at": "2025-07-17T20:02:16.882315Z"}], "thread_id": "Thread-1", "execution_time": 0.006747245788574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.mart_prello_france_population_filter", "compiled": true, "compiled_code": "with population as (\n    select * \n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__poverty_population_by_municipality`\n    where municipality_code is not null\n      and year is not null\n      and population is not null\n),\n\nranked as (\n    select *,\n           row_number() over (\n               partition by municipality_code\n               order by year desc\n           ) as row_num\n    from population\n),\n\nlast_year_population as (\n    select\n        municipality_code,\n        year,\n        population\n    from ranked\n    where row_num = 1\n)\n\nselect *\nfrom last_year_population", "relation_name": "`prello-france`.`dbt_ddelmor`.`mart_prello_france_population_filter`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.886670Z", "completed_at": "2025-07-17T20:02:16.889832Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.890415Z", "completed_at": "2025-07-17T20:02:16.890426Z"}], "thread_id": "Thread-1", "execution_time": 0.0066471099853515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_housing_stress_index", "compiled": true, "compiled_code": "with housing as (\n    select\n        municipality_code,\n        intensite_tension_immo\n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__real_estate_info_by_municipality`\n),\n\nnormalized as (\n    select\n        municipality_code,\n        intensite_tension_immo,\n        -- Normalize between 0 and 1 using min 4 and max 31\n        (intensite_tension_immo - 4) / (31 - 4) as housing_stress_index_normalized\n    from housing\n)\n\nselect * from normalized", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_housing_stress_index`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.894816Z", "completed_at": "2025-07-17T20:02:16.898307Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.898897Z", "completed_at": "2025-07-17T20:02:16.898907Z"}], "thread_id": "Thread-1", "execution_time": 0.00708770751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_rental_yield", "compiled": true, "compiled_code": "WITH rental_data AS (\n    SELECT\n        municipality_code,\n        rental_med_all\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__real_estate_info_by_municipality`\n    WHERE rental_med_all IS NOT NULL\n),\n\nsales_data_2021 AS (\n    SELECT\n        municipality_code,\n        sales_price_m2\n    FROM `prello-france`.`dbt_ddelmor`.`stg_prello_france__notary_real_estate_sales_clean`\n    WHERE sales_price_m2 IS NOT NULL\n      AND municipality_code IS NOT NULL\n      AND year = 2021\n),\n\nmedian_sales_price AS (\n    SELECT\n        municipality_code,\n        APPROX_QUANTILES(sales_price_m2, 2)[OFFSET(1)] AS median_sales_price_m2_2021\n    FROM sales_data_2021\n    GROUP BY municipality_code\n),\n\njoined AS (\n    SELECT\n        rental_data.municipality_code,\n        rental_med_all,\n        median_sales_price_m2_2021,\n        ROUND(SAFE_DIVIDE(rental_med_all * 12, median_sales_price_m2_2021), 4) AS rental_yield_yearly\n    FROM rental_data\n    JOIN median_sales_price\n        ON rental_data.municipality_code = median_sales_price.municipality_code\n),\n\nstats AS (\n    SELECT \n        MAX(rental_yield_yearly) AS max_rental_yield,\n        MIN(rental_yield_yearly) AS min_rental_yield\n        FROM joined\n),\n\nnormalized AS (\n    SELECT\n        j.*,\n        ROUND(SAFE_DIVIDE(j.rental_yield_yearly - s.min_rental_yield, s.max_rental_yield - s.min_rental_yield), 4) AS rental_yield_normalized\n    FROM joined j\n    CROSS JOIN stats s\n)\n\n\nSELECT *\nFROM normalized", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_rental_yield`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.903143Z", "completed_at": "2025-07-17T20:02:16.906451Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.907052Z", "completed_at": "2025-07-17T20:02:16.907063Z"}], "thread_id": "Thread-1", "execution_time": 0.00681614875793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.int_prello_france_kpi_population_growth_rate_normalized", "compiled": true, "compiled_code": "with aggregated as (\n    select\n        municipality_code,\n        avg_growth_last_5_years\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_percentage_population_growth`\n),\n\npos_range as (\n    select\n        min(avg_growth_last_5_years) as min_pos,\n        max(avg_growth_last_5_years) as max_pos\n    from aggregated\n    where avg_growth_last_5_years > 0\n),\n\nneg_range as (\n    select\n        min(avg_growth_last_5_years) as min_neg,\n        max(avg_growth_last_5_years) as max_neg\n    from aggregated\n    where avg_growth_last_5_years < 0\n),\n\nfinal as (\n    select\n        a.municipality_code,\n        a.avg_growth_last_5_years,\n\n        case\n            when a.avg_growth_last_5_years > 0 then\n                (a.avg_growth_last_5_years - p.min_pos) / nullif(p.max_pos - p.min_pos, 0)\n\n            when a.avg_growth_last_5_years < 0 then\n                ((a.avg_growth_last_5_years - n.max_neg) / nullif(n.min_neg - n.max_neg, 0)) * -1\n\n            else 0\n        end as avg_growth_last_5_years_normalized\n\n    from aggregated a\n    left join pos_range p on true\n    left join neg_range n on true\n)\n\nselect *\nfrom final", "relation_name": "`prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_population_growth_rate_normalized`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.911703Z", "completed_at": "2025-07-17T20:02:16.918185Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.918801Z", "completed_at": "2025-07-17T20:02:16.918812Z"}], "thread_id": "Thread-1", "execution_time": 0.009984493255615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.mart_prello_france_joined_kpis_city_scoring", "compiled": true, "compiled_code": "with geographical_referential as (\n    select\n    municipality_code,\n    city_name_normalized,\n    latitude,\n    longitude\n    from `prello-france`.`dbt_ddelmor`.`stg_prello_france__geographical_referential`\n),\n\naverage_salary as (\n    select \n    municipality_code,\n    avg_net_salary\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_avg_net_salary`\n),\n\ncount_tourist_est_poi as (\n    select\n    municipality_code,\n    count_tourist_poi,\n    count_tourist_poi_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_count_tourist_poi`\n),\n\nhousing_stress_index as (\n    select\n    municipality_code,\n    intensite_tension_immo,\n    housing_stress_index_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_housing_stress_index`\n),\n\npopulation_growth_5_year as (\n    select\n    municipality_code,\n    avg_growth_last_5_years\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_percentage_population_growth`\n),\n\npopulation_growth_5_year_normalized as (\n    select\n    municipality_code,\n    avg_growth_last_5_years_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_population_growth_rate_normalized`\n),\n\npoi_density_touristic_sites as (\n    select\n    municipality_code,\n    poi_count as touristic_sites_poi_count,\n    population,\n    poi_density,\n    poi_density_normalized,\n    poi_count_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_poi_density`\n),\n\nrental_yield as (\n    select\n    municipality_code,\n    rental_med_all,\n    median_sales_price_m2_2021,\n    rental_yield_yearly,\n    rental_yield_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_rental_yield`\n),\n\nestablishment_poi_score as (\n    select\n    municipality_code,\n    raw_establishment_score,\n    establishment_score_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_tourist_poi_score`\n),\n\nvacancy_rate as (\n    select\n    municipality_code,\n    nb_vacants_housing,\n    nb_tot_housing,\n    vacancy_rate_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_vacancy_rate`\n), \n\nsecond_home_ratio_2 as (\n    select\n    municipality_code,\n    nb_second_home,\n    nb_tot_housing  AS nb_tot_housing_shr,\n    second_home_ratio,\n    second_home_ratio_normalized\n    from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_second_home_ratio_2`\n),\n\nsales_price_2 as (\n    select\n    municipality_code,\n    avg_sales_price_m2,\n    avg_sales_price_m2_normalized\n     from `prello-france`.`dbt_ddelmor`.`int_prello_france_kpi_sales_price_2`\n),\n\n\njoined_kpis as (\n    select\n    gr.municipality_code,\n    gr.city_name_normalized,\n    gr.latitude,\n    gr.longitude,\n    cpoi.count_tourist_poi,\n    cpoi.count_tourist_poi_normalized,\n    pg.avg_growth_last_5_years,\n    pgn.avg_growth_last_5_years_normalized,\n    pct.touristic_sites_poi_count,\n    pct.poi_density,\n    pct.poi_density_normalized,\n    pct.poi_count_normalized,\n    ry.rental_yield_yearly,\n    ry.rental_yield_normalized,\n    pcs.raw_establishment_score,\n    pcs.establishment_score_normalized,\n    vr.vacancy_rate_normalized,\n    sp2.avg_sales_price_m2   AS avg_sales_price_m2_latest,   -- NEW\n    sp2.avg_sales_price_m2_normalized,\n    shr.second_home_ratio,\n    shr.second_home_ratio_normalized,\n    hs.intensite_tension_immo,\n    hs.housing_stress_index_normalized\n\n\n    from geographical_referential gr\n    left join average_salary avs on gr.municipality_code = avs.municipality_code\n    left join count_tourist_est_poi cpoi on gr.municipality_code = cpoi.municipality_code\n    left join housing_stress_index hs on gr.municipality_code = hs.municipality_code\n    left join population_growth_5_year pg on gr.municipality_code = pg.municipality_code\n    left join population_growth_5_year_normalized pgn on gr.municipality_code = pgn.municipality_code\n    left join poi_density_touristic_sites pct on gr.municipality_code = pct.municipality_code\n    left join rental_yield ry on gr.municipality_code = ry.municipality_code\n    left join establishment_poi_score pcs on gr.municipality_code = pcs.municipality_code\n    left join vacancy_rate vr on gr.municipality_code = vr.municipality_code\n    left join second_home_ratio_2 shr on gr.municipality_code = shr.municipality_code\n    left join sales_price_2 sp2 on gr.municipality_code = sp2.municipality_code\n)\n\nselect * from joined_kpis", "relation_name": "`prello-france`.`dbt_ddelmor`.`mart_prello_france_joined_kpis_city_scoring`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.923390Z", "completed_at": "2025-07-17T20:02:16.928090Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.928688Z", "completed_at": "2025-07-17T20:02:16.928699Z"}], "thread_id": "Thread-1", "execution_time": 0.008199691772460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.mart_prello_france_joined_kpis_city_normalized_final_version", "compiled": true, "compiled_code": "with city_scoring_kpis as (\n\n    select * \n    from `prello-france`.`dbt_ddelmor`.`mart_prello_france_joined_kpis_city_scoring`\n\n),\n\ncleaned as (\n\n    select\n        municipality_code,\n        city_name_normalized,\n        latitude,\n        longitude,\n        avg_sales_price_m2_latest,\n        intensite_tension_immo as housing_stress_index_normalized,\n        second_home_ratio,\n        vacancy_rate_normalized,\n        coalesce(rental_yield_yearly, 0) as rental_yield_clean,\n        coalesce(raw_establishment_score, 0) as establishment_score,\n        coalesce(count_tourist_poi, 0) as count_tourist_poi_clean,\n        coalesce(poi_density, 0) as poi_density_clean,\n        coalesce(touristic_sites_poi_count, 0) as touristic_sites_poi_count,\n        avg_growth_last_5_years\n    from city_scoring_kpis\n    where avg_sales_price_m2_latest is not null\n      and intensite_tension_immo is not null\n      and vacancy_rate_normalized is not null\n      and second_home_ratio is not null\n      and avg_growth_last_5_years is not null\n\n),\n\nstats as (\n\n    select\n        min(avg_sales_price_m2_latest) as min_price,\n        max(avg_sales_price_m2_latest) as max_price,\n\n        min(housing_stress_index_normalized) as min_stress,\n        max(housing_stress_index_normalized) as max_stress,\n\n        min(second_home_ratio) as min_second_home,\n        max(second_home_ratio) as max_second_home,\n\n        min(vacancy_rate_normalized) as min_vacancy,\n        max(vacancy_rate_normalized) as max_vacancy,\n\n        min(rental_yield_clean) as min_rental_yield,\n        max(rental_yield_clean) as max_rental_yield,\n\n        min(establishment_score) as min_estab,\n        max(establishment_score) as max_estab,\n\n        min(count_tourist_poi_clean) as min_tourist_poi,\n        max(count_tourist_poi_clean) as max_tourist_poi,\n\n        min(poi_density_clean) as min_poi_density,\n        max(poi_density_clean) as max_poi_density,\n\n        min(touristic_sites_poi_count) as min_sites,\n        max(touristic_sites_poi_count) as max_sites,\n\n        min(avg_growth_last_5_years) as min_growth,\n        max(avg_growth_last_5_years) as max_growth\n    from cleaned\n\n),\n\nnormalized as (\n\n    select\n        c.municipality_code,\n        c.city_name_normalized,\n        c.latitude,\n        c.longitude,\n\n        round((c.avg_sales_price_m2_latest - s.min_price) / nullif(s.max_price - s.min_price, 0), 2) as avg_sales_price_m2_latest,\n        round((c.housing_stress_index_normalized - s.min_stress) / nullif(s.max_stress - s.min_stress, 0), 2) as housing_stress_index_normalized,\n        round((c.second_home_ratio - s.min_second_home) / nullif(s.max_second_home - s.min_second_home, 0), 2) as second_home_ratio,\n        round((c.vacancy_rate_normalized - s.min_vacancy) / nullif(s.max_vacancy - s.min_vacancy, 0), 2) as vacancy_rate_normalized,\n        round((c.rental_yield_clean - s.min_rental_yield) / nullif(s.max_rental_yield - s.min_rental_yield, 0), 2) as rental_yield_clean_normalized,\n        round((c.establishment_score - s.min_estab) / nullif(s.max_estab - s.min_estab, 0), 2) as establishment_score,\n        round((c.count_tourist_poi_clean - s.min_tourist_poi) / nullif(s.max_tourist_poi - s.min_tourist_poi, 0), 2) as count_tourist_poi_clean,\n        round((c.poi_density_clean - s.min_poi_density) / nullif(s.max_poi_density - s.min_poi_density, 0), 2) as poi_density_clean,\n        round((c.touristic_sites_poi_count - s.min_sites) / nullif(s.max_sites - s.min_sites, 0), 2) as touristic_sites_poi_count,\n\n        round(\n            case \n                when c.avg_growth_last_5_years >= 0 and s.max_growth != 0 then c.avg_growth_last_5_years / s.max_growth\n                when c.avg_growth_last_5_years < 0 and s.min_growth != 0 then c.avg_growth_last_5_years / abs(s.min_growth)\n                else 0\n            end, \n        2) as avg_growth_last_5_years\n\n    from cleaned c\n    cross join stats s\n\n)\n\nselect * from normalized", "relation_name": "`prello-france`.`dbt_ddelmor`.`mart_prello_france_joined_kpis_city_normalized_final_version`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-17T20:02:16.933205Z", "completed_at": "2025-07-17T20:02:16.936949Z"}, {"name": "execute", "started_at": "2025-07-17T20:02:16.937524Z", "completed_at": "2025-07-17T20:02:16.937535Z"}], "thread_id": "Thread-1", "execution_time": 0.007252931594848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.prello_project.mart_prello_france_all_scores_scaled_final", "compiled": true, "compiled_code": "\n\nWITH base AS (\n  SELECT *\n  FROM `prello-france`.`dbt_ddelmor`.`mart_prello_france_joined_kpis_city_normalized_final_version`\n),\n\nscored AS (\n  SELECT\n    *,\n    -- Raw scores (before normalisation)\n    (\n      rental_yield_clean_normalized * 0.15 +\n      establishment_score * 0.25 +\n      poi_density_clean * 0.25 +\n      avg_growth_last_5_years * 0.05 +\n      housing_stress_index_normalized * 0.10 +\n      vacancy_rate_normalized * 0.05 +\n      second_home_ratio * 0.10 +\n      avg_sales_price_m2_latest * 0.05\n    ) AS raw_vacation_seeker_score,\n\n    (\n      rental_yield_clean_normalized * 0.30 +\n      establishment_score * 0.05 +\n      poi_density_clean * 0.05 +\n      avg_growth_last_5_years * 0.15 +\n      housing_stress_index_normalized * 0.20 +\n      vacancy_rate_normalized * 0.15 +\n      second_home_ratio * 0.05 +\n      avg_sales_price_m2_latest * 0.05\n    ) AS raw_yield_investor_score,\n\n    (\n      rental_yield_clean_normalized * 0.05 +\n      establishment_score * 0.20 +\n      poi_density_clean * 0.10 +\n      avg_growth_last_5_years * 0.10 +\n      housing_stress_index_normalized * 0.05 +\n      vacancy_rate_normalized * 0.05 +\n      second_home_ratio * 0.15 +\n      avg_sales_price_m2_latest * 0.30\n    ) AS raw_luxury_buyer_score,\n\n    (\n      rental_yield_clean_normalized * ((0.15 + 0.30 + 0.05) / 3) +\n      establishment_score * ((0.25 + 0.05 + 0.20) / 3) +\n      poi_density_clean * ((0.25 + 0.05 + 0.10) / 3) +\n      avg_growth_last_5_years * ((0.05 + 0.15 + 0.10) / 3) +\n      housing_stress_index_normalized * ((0.10 + 0.20 + 0.05) / 3) +\n      vacancy_rate_normalized * ((0.05 + 0.15 + 0.05) / 3) +\n      second_home_ratio * ((0.10 + 0.05 + 0.15) / 3) +\n      avg_sales_price_m2_latest * ((0.05 + 0.05 + 0.30) / 3)\n    ) AS raw_city_opportunity_score\n  FROM base\n),\n\nstats AS (\n  SELECT\n    MIN(raw_vacation_seeker_score) AS min_vac,\n    MAX(raw_vacation_seeker_score) AS max_vac,\n    MIN(raw_yield_investor_score) AS min_yield,\n    MAX(raw_yield_investor_score) AS max_yield,\n    MIN(raw_luxury_buyer_score) AS min_lux,\n    MAX(raw_luxury_buyer_score) AS max_lux,\n    MIN(raw_city_opportunity_score) AS min_city,\n    MAX(raw_city_opportunity_score) AS max_city\n  FROM scored\n),\n\nfinal AS (\n  SELECT \n    s.municipality_code,\n    s.city_name_normalized,\n    s.latitude,\n    s.longitude,\n\n    -- Normalised 0-100 scores\n    SAFE_DIVIDE(s.raw_vacation_seeker_score - st.min_vac, st.max_vac - st.min_vac) * 100 AS vacation_seeker_score,\n    SAFE_DIVIDE(s.raw_yield_investor_score - st.min_yield, st.max_yield - st.min_yield) * 100 AS yield_investor_score,\n    SAFE_DIVIDE(s.raw_luxury_buyer_score - st.min_lux, st.max_lux - st.min_lux) * 100 AS luxury_buyer_score,\n    SAFE_DIVIDE(s.raw_city_opportunity_score - st.min_city, st.max_city - st.min_city) * 100 AS city_opportunity_score\n\n  FROM scored s\n  CROSS JOIN stats st\n)\n\nSELECT * FROM final", "relation_name": "`prello-france`.`dbt_ddelmor`.`mart_prello_france_all_scores_scaled_final`", "batch_results": null}], "elapsed_time": 0.5189008712768555, "args": {"source_freshness_run_project_hooks": true, "defer": false, "show_resource_report": false, "introspect": true, "require_explicit_package_overrides_for_builtin_materializations": true, "indirect_selection": "eager", "version_check": true, "printer_width": 80, "use_colors_file": true, "validate_macro_args": false, "quiet": false, "exclude": [], "macro_debugging": false, "project_dir": "/home/runner/work/Prello/Prello", "send_anonymous_usage_stats": true, "vars": {}, "empty_catalog": false, "use_fast_test_edges": false, "upload_to_artifacts_ingest_api": false, "use_colors": true, "partial_parse": true, "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_more_unrendered_values": false, "populate_cache": true, "static_parser": true, "require_yaml_configuration_for_mf_time_spines": false, "log_level": "info", "require_resource_names_without_spaces": true, "invocation_command": "dbt docs generate --static", "select": [], "log_format": "default", "strict_mode": false, "log_level_file": "debug", "compile": true, "favor_state": false, "log_file_max_bytes": 10485760, "log_path": "/home/runner/work/Prello/Prello/logs", "profiles_dir": "/home/runner/.dbt", "require_batched_execution_for_custom_microbatch_strategy": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "static": true, "which": "generate", "print": true, "log_format_file": "debug", "cache_selected_only": false, "state_modified_compare_vars": false, "partial_parse_file_diff": true, "require_all_warnings_handled_by_warn_error": false, "show_all_deprecations": false, "write_json": true, "require_nested_cumulative_type_params": false}}